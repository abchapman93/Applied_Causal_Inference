---
title: "Propensity Scores"
format: html
editor: visual
---

## Data

First we'll read in the data and do some data wrangling.

```{r}
source("./propensity_scores.R")
options(scipen=999)
FILEPATH = "./NHEFS-1.xls"
# Turn categorical columns into factors
FACTOR_COLS = c(
  "marital"
  # ,"income"
  ,"education"
  ,"alcoholtype"
  ,"exercise"
  ,"active"
)

ANALYTIC_VARS = c(
  "sex",
  "age",
  "race",
  "income",
  "marital",
  "education", # Use this instead of school
  "wt71",
  "smokeintensity",
  "smokeyrs",
  "asthma",
  "bronch",
  "tb",
  "hf",
  "hbp",
  "pepticulcer",
  "colitis",
  "hepatitis",
  "chroniccough",
  "diabetes",
  "polio",
  "tumor",
  "nervousbreak",
  "alcoholpy",
  "alcoholfreq",
  "alcoholtype",
  "alcoholhowmuch",
  "pica",
  "headache",
  "otherpain",
  "weakheart",
  "nerves",
  "lackpep",
  "hbpmed",
  "boweltrouble",
  "infection",
  "active",
  "exercise",
  "birthcontrol",
  "pregnancies",
  "cholesterol",
  "wtloss"
)


```

```{r}
df = read_data(FILEPATH, ANALYTIC_VARS, FACTOR_COLS)
str(df)

```

## Missing data

Next, let's check for missing values in the rest of the data. If it's small, we'll drop any remaining rows with missing values.

```{r}
p_missing = df%>%
  apply(2, function(x){mean(is.na(x))}) %>%
  sort(decreasing=TRUE)
p_missing

df = df[which(apply(df, 1, function(x){max(is.na(x)) == FALSE})),]



```

# Propensity scores

```{r}
m = glm(qsmk ~ ., data=df[c(ANALYTIC_VARS, "qsmk")], family=binomial())
summary(m)
```

```{r}
df = add_propensity_scores(df, m)
str(df)
```

#### Check for overlap in propensity scores and range of weights

```{r}
ggplot(df, aes(x=ps, fill=as.factor(qsmk))) +
  geom_histogram() +
  facet_wrap(~qsmk, scales="free_y", nrow=2)

ggplot(df, aes(x=w, fill=as.factor(qsmk))) +
  geom_histogram() +
  facet_wrap(~qsmk, scales="free_y", nrow=2)
```

```{r}
tab1_unweighted = CreateTableOne(ANALYTIC_VARS, strata="qsmk", data=df)
tab1_unweighted
```

```{r}
svy_weighted = svydesign(ids = ~ 1, data = df,  weights = ~w)
tab1_weighted = svyCreateTableOne(ANALYTIC_VARS, strata="qsmk", data=svy_weighted)
tab1_weighted
```

```{r}
smds_uw = ExtractSmd(tab1_unweighted)
smds_w = ExtractSmd(tab1_weighted)
smds = tibble(
  var = tab1_weighted$MetaData$vars,
  unweighted = ExtractSmd(tab1_unweighted),
  weighted =  ExtractSmd(tab1_weighted)
)


```

```{r}
plot_standardized_mean_diffs = function(smds){
  var_order =  smds %>%
  arrange(unweighted) %>%
  pull(var)
mutate(smds, var=factor(var, levels=var_order)) %>%
  ggplot(aes(y=var, x=unweighted)) +
  geom_point(color="red") + 
  geom_point(aes(x=weighted), color="blue") +
  geom_vline(xintercept=0) +
  geom_vline(xintercept=0.1)
}
plot_standardized_mean_diffs(smds)
ggsave("results/ipw_balance.png")
```

## Outcome regression model

```{r}
model_unweighted = lm(wt82_71 ~ qsmk, data=df)
model_ipw = lm(wt82_71 ~ qsmk, data=df, weights = df$w)
summary(model_ipw)
```

```{r}

```

```{r}
means = calc_means(df, ANALYTIC_VARS) 
sd_diffs = add_sd_diffs(means)

```

```{r}

plot_standard_diffs(sd_diffs)
ggsave("./results/standardized_differences.png")
```

# Matching

```{r}
m.out_greedy = create_matched_object(df)
matched_data_greedy = create_matched_dataset(m.out_greedy)
m.out_summary = summary(matched_data_greedy, un=FALSE)
plot_balance(m.out_greedy)
ggsave("./results/matched_greedy_balance.png", height=6, width=4)
```

```{r}
model_matched_greedy = lm(wt82_71 ~ qsmk, data=matched_data_greedy)



```

```{r}
summary(model_matched_greedy)
confint(model_matched_greedy)
```

```{r}
m.out_optimal = create_matched_object(df, method="optimal")
matched_data_optimal = create_matched_dataset(m.out_optimal)
```

```{r}
plot_balance(m.out_optimal)
ggsave("./results/matched_optimal_balance.png", height=6, width=4)
```

```{r}
model_matched_optimal = lm(wt82_71 ~ qsmk, data=matched_data_optimal)
```

```{r}
summary(model_matched_optimal)
confint(model_matched_optimal)
```

```{r}
model_unweighted = lm(wt82_71 ~ qsmk, data=df)
model_weighted = lm(wt82_71 ~ qsmk, data=df, weights = df$w)
```

```{r}
summary(model_weighted)
confint(model_weighted)
```

```{r}
summary(model_unweighted)
confint(model_unweighted)
```

```{r}
summary(model_matched_greedy)
confint(model_matched_greedy)
```

```{r}
model_adjusted_ps = lm(wt82_71 ~ qsmk + ps, data=select(df, -studyid))
```

```{r}
summary(model_adjusted_ps)
confint(model_adjusted_ps)
```

```{r}
model_regression = lm(wt82_71 ~ ., data=df[c("wt82_71", "qsmk", ANALYTIC_VARS)])
```

```{r}
summary(model_regression)
confint(model_regression, "qsmk")
```
